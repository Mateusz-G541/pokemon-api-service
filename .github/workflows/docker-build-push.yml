name: Build and Push Docker Image to DockerHub

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch: # Allow manual trigger

env:
  DOCKER_IMAGE_NAME: pokemon-api-service

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build TypeScript
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        if: github.event_name != 'pull_request'
        run: |
          echo "🧪 Testing Docker image..."
          docker run --rm -d -p 20275:20275 --name test-container ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          
          # Wait for container to start and initialize
          echo "⏳ Waiting for container to start..."
          sleep 30
          
          # Check if container is still running and get logs
          if ! docker ps | grep -q test-container; then
            echo "❌ Container stopped unexpectedly"
            echo "📋 Container logs:"
            docker logs test-container 2>&1 || echo "Could not retrieve logs"
            echo "🔍 Checking if container exists:"
            docker ps -a | grep test-container || echo "Container not found in docker ps -a"
            exit 1
          fi
          
          # Test health endpoint with retries
          echo "🔍 Testing health endpoint..."
          for i in {1..5}; do
            if curl -f http://localhost:20275/health; then
              echo "✅ Health check passed!"
              break
            else
              echo "⏳ Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              docker logs test-container
              docker stop test-container
              exit 1
            fi
          done
          
          # Cleanup
          docker stop test-container
          
          echo "✅ Docker image test passed!"

      - name: Image digest
        if: github.event_name != 'pull_request'
        run: echo ${{ steps.build.outputs.digest }}
